{"version":3,"sources":["modules/Ceil.class.js","modules/Tile.class.js","modules/Game.class.js","scripts/main.js"],"names":["SCORE","Ceil","gridElement","x","y","cell","document","createElement","classList","add","append","score","gameScore","querySelector","tile","setXY","linkedTile","innerHTML","linkedTileForMerge","newTile","isEmpty","hasTileForMerge","value","result","setValue","console","log","textContent","toggle","removeFromDOM","unlinkTileForMerge","COLORS","Tile","tileElement","Math","random","style","setProperty","remove","Promise","resolve","addEventListener","once","GRID_SIZE","CELLS_COUNT","Game","cells","i","push","floor","cellsGroupedByColumn","groupCellsByColumn","cellsGroupedByReversedColumn","map","column","reverse","cellsGroupedByRow","groupCellsByRow","cellsGroupedByReversedRow","raw","emptyCells","filter","length","reduce","groupedCells","slideTiles","canMove","some","group","canMoveInGroup","index","canAccept","promises","forEach","slideTilesInGroup","all","mergeTiles","j","cellWithTile","targetCell","waitForTransitionEnd","linkTile","linkTileForMerge","unlinkTile","getRandomEmptyCell","querySelectorAll","getElementById","lose","start","game","setupInputOnce","handleInput","event","key","canMoveUp","moveUp","canMoveDown","moveDown","canMoveLeft","moveLeft","canMoveRight","moveRight","waitForAnimationEnd","button","contains","replace","restart"],"mappings":";AAyEG,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,UAAA,MAAA,WAAA,EAAA,GAAA,EAAA,OAAA,GAAA,SAAA,EAAA,EAAA,GAAA,GAAA,WAAA,EAAA,IAAA,OAAA,EAAA,OAAA,EAAA,IAAA,EAAA,EAAA,OAAA,aAAA,QAAA,IAAA,EAAA,CAAA,IAAA,EAAA,EAAA,KAAA,EAAA,GAAA,WAAA,GAAA,WAAA,EAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,gDAAA,OAAA,WAAA,EAAA,OAAA,QAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EAzEH,IAAIA,EAAQ,EAECC,EAAAA,QAAAA,KAuEV,WAtEWC,SAAAA,EAAAA,EAAaC,EAAGC,GAAG,EAAA,KAAA,GACvBC,IAAAA,EAAOC,SAASC,cAAc,OACpCF,EAAKG,UAAUC,IAAI,cACnBP,EAAYQ,OAAOL,GACdF,KAAAA,EAAIA,EACJC,KAAAA,EAAIA,EACJO,KAAAA,MAAQ,EACRC,KAAAA,UAAYN,SAASO,cAAc,eA+DzC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,WA5DD,MAAA,SAASC,GACPA,EAAKC,MAAM,KAAKZ,EAAG,KAAKC,GACnBY,KAAAA,WAAaF,IA0DnB,CAAA,IAAA,aAvDD,MAAA,WACOE,KAAAA,WAAa,OAsDnB,CAAA,IAAA,UAnDD,MAAA,WACS,OAAC,KAAKA,aAkDd,CAAA,IAAA,cA/CD,MAAA,WAGS,OAFPhB,EAAQ,EACHY,KAAAA,UAAUK,UAAYjB,EACpB,KAAKgB,WAAa,OA4C1B,CAAA,IAAA,mBAzCD,MAAA,SAAiBF,GACfA,EAAKC,MAAM,KAAKZ,EAAG,KAAKC,GACnBc,KAAAA,mBAAqBJ,IAuC3B,CAAA,IAAA,qBApCD,MAAA,WACOI,KAAAA,mBAAqB,OAmC3B,CAAA,IAAA,kBAhCD,MAAA,WACS,QAAE,KAAKA,qBA+Bf,CAAA,IAAA,YA5BD,MAAA,SAAUC,GAEN,OAAA,KAAKC,YACH,KAAKC,mBAAqB,KAAKL,WAAWM,QAAUH,EAAQG,QAyBjE,CAAA,IAAA,aArBD,MAAA,WACM,GAAA,KAAKN,WAAY,CACbO,IAAAA,EAAS,KAAKP,WAAWM,MAAQ,KAAKJ,mBAAmBI,MAW3DC,GAVCP,KAAAA,WAAWQ,SAASD,GAEpBZ,KAAAA,OAASY,EAEVvB,EAAQ,KAAKW,QACfc,QAAQC,IAAI,KAAKf,OACjBX,EAAQ,KAAKW,MACRC,KAAAA,UAAUe,YAAc3B,GAG3BuB,GAAU,KACAjB,SAASO,cAAc,gBAC/BL,UAAUoB,OAAO,UAGlBV,KAAAA,mBAAmBW,gBACnBC,KAAAA,0BAER,EAAA;;ACrBA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,UAAA,MAAA,WAAA,EAAA,GAAA,EAAA,OAAA,GAAA,SAAA,EAAA,EAAA,GAAA,GAAA,WAAA,EAAA,IAAA,OAAA,EAAA,OAAA,EAAA,IAAA,EAAA,EAAA,OAAA,aAAA,QAAA,IAAA,EAAA,CAAA,IAAA,EAAA,EAAA,KAAA,EAAA,GAAA,WAAA,GAAA,WAAA,EAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,gDAAA,OAAA,WAAA,EAAA,OAAA,QAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EApDH,IAAMC,EAAS,CACV,EAAA,UACA,EAAA,UACA,EAAA,UACC,GAAA,UACA,GAAA,UACA,GAAA,UACC,IAAA,UACA,IAAA,UACA,IAAA,UACC,KAAA,UACA,KAAA,WAGKC,EAAAA,QAAAA,KAsCV,WArCW9B,SAAAA,EAAAA,GAAa,EAAA,KAAA,GAClB+B,KAAAA,YAAc3B,SAASC,cAAc,OACrC0B,KAAAA,YAAYzB,UAAUC,IAAI,QAC1Be,KAAAA,SAASU,KAAKC,SAAW,GAAM,EAAI,GACxCjC,EAAYQ,OAAO,KAAKuB,aAiCzB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,WA9BD,MAAA,SAASX,GACFA,KAAAA,MAAQA,EACRW,KAAAA,YAAYN,YAAcL,EAC1BW,KAAAA,YAAYG,MAAMC,YAAY,aAAiBN,GAAAA,OAAAA,EAAOT,KACtDW,KAAAA,YAAYG,MAAMC,YAAY,eAAmBf,GAAAA,OAAAA,GAAS,EAAI,UAAY,cA0BhF,CAAA,IAAA,QAvBD,MAAA,SAAMnB,EAAGC,GACFD,KAAAA,EAAIA,EACJC,KAAAA,EAAIA,EACJ6B,KAAAA,YAAYG,MAAMC,YAAY,MAAOlC,GACrC8B,KAAAA,YAAYG,MAAMC,YAAY,MAAOjC,KAmB3C,CAAA,IAAA,gBAhBD,MAAA,WACO6B,KAAAA,YAAYK,WAelB,CAAA,IAAA,uBAZD,MAAA,WAAuB,IAAA,EAAA,KACd,OAAA,IAAIC,QAAQ,SAAAC,GACjB,EAAKP,YAAYQ,iBACf,gBAAiBD,EAAS,CAAEE,MAAM,QASvC,CAAA,IAAA,sBALD,MAAA,WAAsB,IAAA,EAAA,KACb,OAAA,IAAIH,QAAQ,SAAAC,GACjB,EAAKP,YAAYQ,iBACf,eAAgBD,EAAS,CAAEE,MAAM,UAEtC,EAAA;;ACpDH,aAuJG,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EArJH,IAAA,EAAA,QAAA,gBACA,EAAA,QAAA,gBAoJG,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,WAAA,MAAA,EAAA,cAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,UAAA,MAAA,WAAA,EAAA,GAAA,EAAA,OAAA,GAAA,SAAA,EAAA,EAAA,GAAA,GAAA,WAAA,EAAA,IAAA,OAAA,EAAA,OAAA,EAAA,IAAA,EAAA,EAAA,OAAA,aAAA,QAAA,IAAA,EAAA,CAAA,IAAA,EAAA,EAAA,KAAA,EAAA,GAAA,WAAA,GAAA,WAAA,EAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,gDAAA,OAAA,WAAA,EAAA,OAAA,QAAA,GAlJH,IAAMC,EAAY,EACZC,EAAcD,EAAYA,EAEnBE,EAAAA,QAAAA,KA+IV,WA9IW3C,SAAAA,EAAAA,GAAa,EAAA,KAAA,GAClB4C,KAAAA,MAAQ,GACR,IAAA,IAAIC,EAAI,EAAGA,EAAIH,EAAaG,IAC1BD,KAAAA,MAAME,KACT,IAAI/C,EAAJ,KAASC,EAAa6C,EAAIJ,EAAWT,KAAKe,MAAMF,EAAIJ,KAInDhC,KAAAA,MAAQ,EACRuC,KAAAA,qBAAuB,KAAKC,qBAC5BC,KAAAA,6BAA+B,KAAKF,qBAAqBG,IAAI,SAAAC,GAAU,OAAA,EAAIA,GAAQC,YACnFC,KAAAA,kBAAoB,KAAKC,kBACzBC,KAAAA,0BAA4B,KAAKF,kBAAkBH,IAAI,SAAAM,GAAO,OAAA,EAAIA,GAAKJ,YAkI7E,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,qBA/HD,MAAA,WACQK,IAAAA,EAAa,KAAKd,MAAMe,OAAO,SAAAxD,GAAQA,OAAAA,EAAKe,YAE3CwC,OAAAA,EADa1B,KAAKe,MAAMf,KAAKC,SAAWyB,EAAWE,WA6H3D,CAAA,IAAA,qBAzHD,MAAA,WACS,OAAA,KAAKhB,MAAMiB,OAAO,SAACC,EAAc3D,GAG/B2D,OAFPA,EAAa3D,EAAKF,GAAK6D,EAAa3D,EAAKF,IAAM,GAC/C6D,EAAa3D,EAAKF,GAAGE,EAAKD,GAAKC,EACxB2D,GACN,MAoHJ,CAAA,IAAA,kBAjHD,MAAA,WACS,OAAA,KAAKlB,MAAMiB,OAAO,SAACC,EAAc3D,GAG/B2D,OAFPA,EAAa3D,EAAKD,GAAK4D,EAAa3D,EAAKD,IAAM,GAC/C4D,EAAa3D,EAAKD,GAAGC,EAAKF,GAAKE,EACxB2D,GACN,MA4GJ,CAAA,IAAA,SAzGD,MAAA,WACOC,KAAAA,WAAW,KAAKf,wBAwGtB,CAAA,IAAA,WArGD,MAAA,WACOe,KAAAA,WAAW,KAAKb,gCAoGtB,CAAA,IAAA,WAjGD,MAAA,WACOa,KAAAA,WAAW,KAAKT,qBAgGtB,CAAA,IAAA,YA7FD,MAAA,WACOS,KAAAA,WAAW,KAAKP,6BA4FtB,CAAA,IAAA,YAzFD,MAAA,WACS,OAAA,KAAKQ,QAAQ,KAAKhB,wBAwF1B,CAAA,IAAA,cArFD,MAAA,WACS,OAAA,KAAKgB,QAAQ,KAAKd,gCAoF1B,CAAA,IAAA,cAjFD,MAAA,WACS,OAAA,KAAKc,QAAQ,KAAKV,qBAgF1B,CAAA,IAAA,eA7ED,MAAA,WACS,OAAA,KAAKU,QAAQ,KAAKR,6BA4E1B,CAAA,IAAA,UAzED,MAAA,SAAQM,GAAc,IAAA,EAAA,KACbA,OAAAA,EAAaG,KAAK,SAAAC,GAAU,OAAA,EAAKC,eAAeD,OAwExD,CAAA,IAAA,iBArED,MAAA,SAAeA,GACNA,OAAAA,EAAMD,KAAK,SAAC9D,EAAMiE,GACnBA,OAAU,IAAVA,KAIAjE,EAAKe,WAIUgD,EAAME,EAAQ,GACfC,UAAUlE,EAAKW,iBA0DpC,CAAA,IAAA,aAtDD,MAAA,SAAWgD,GAAc,IAAA,EAAA,KACjBQ,EAAW,GAEjBR,EAAaS,QAAQ,SAAAL,GAAS,OAAA,EAAKM,kBAAkBN,EAAOI,KAE5DjC,QAAQoC,IAAIH,GACP1B,KAAAA,MAAM2B,QAAQ,SAAApE,GACjBA,EAAKgB,mBAAqBhB,EAAKuE,iBA+ClC,CAAA,IAAA,oBA3CD,MAAA,SAAkBR,EAAOI,GAClB,IAAA,IAAIzB,EAAI,EAAGA,EAAIqB,EAAMN,OAAQf,IAC5BqB,IAAAA,EAAMrB,GAAG3B,UAATgD,CAQGS,IAJDC,IAAAA,EAAeV,EAAMrB,GAEvBgC,OAAJ,EACIF,EAAI9B,EAAI,EACL8B,GAAK,GAAKT,EAAMS,GAAGN,UAAUO,EAAa9D,aAC/C+D,EAAaX,EAAMS,GACnBA,IAGGE,IAILP,EAASxB,KAAK8B,EAAa9D,WAAWgE,wBAElCD,EAAW3D,UACb2D,EAAWE,SAASH,EAAa9D,YAEjC+D,EAAWG,iBAAiBJ,EAAa9D,YAG3C8D,EAAaK,iBAgBhB,CAAA,IAAA,QAZD,MAAA,SAAMjF,GACCkF,KAAAA,qBAAqBH,SAAS,IAAIjD,EAAJ,KAAS9B,IACvCkF,KAAAA,qBAAqBH,SAAS,IAAIjD,EAAJ,KAAS9B,MAU7C,CAAA,IAAA,UAPD,MAAA,WACgBI,SAAS+E,iBAAiB,SAClCZ,QAAQ,SAAA3D,GACZA,EAAKwB,WAGFQ,KAAAA,MAAM2B,QAAQ,SAAApE,GAAQA,OAAAA,EAAK8E,mBACjC,EAAA;;ACvJH,aAEA,IAAA,EAAA,QAAA,yBACA,EAAA,QAAA,yBAEMjF,EAAcI,SAASgF,eAAe,cACtCC,EAAOjF,SAASO,cAAc,iBAC9B2E,EAAQlF,SAASO,cAAc,kBAE/B4E,EAAO,IAAI5C,EAAJ,KAAS3C,GAEtB,SAASwF,IACPpF,SAASmC,iBAAiB,UAAWkD,EAAa,CAAEjD,MAAM,IAG5D,SAASiD,EAAYC,GACZA,OAAAA,EAAMC,KACN,IAAA,UACC,IAACJ,EAAKK,YAER,YADAJ,IAGFD,EAAKM,SACL,MACG,IAAA,YACC,IAACN,EAAKO,cAER,YADAN,IAGFD,EAAKQ,WACL,MACG,IAAA,YACC,IAACR,EAAKS,cAER,YADAR,IAGFD,EAAKU,WACL,MACG,IAAA,aACC,IAACV,EAAKW,eAER,YADAV,IAGFD,EAAKY,YACL,MACF,QAEE,YADAX,IAIEvE,IAAAA,EAAU,IAAIa,EAAJ,KAAS9B,GAGrB,GAFJuF,EAAKL,qBAAqBH,SAAS9D,KAE9BsE,EAAKK,aAAgBL,EAAKO,eAAkBP,EAAKS,eAAkBT,EAAKW,gBAG3E,OAFAjF,EAAQmF,2BACRf,EAAK/E,UAAUoB,OAAO,UAIxB8D,IAGF,IAAMa,EAASjG,SAASO,cAAc,WAEtC0F,EAAO9D,iBAAiB,QAAS,WAC3B8D,EAAO/F,UAAUgG,SAAS,UAC5Bf,EAAKD,MAAMtF,GACXwF,IACAa,EAAO/F,UAAUiG,QAAQ,QAAS,WAClCF,EAAO5E,YAAc,UACrB6D,EAAMhF,UAAUoB,OAAO,YAEvB6D,EAAKiB,UACLH,EAAO/F,UAAUiG,QAAQ,UAAW,SACpCF,EAAO5E,YAAc,QACrB6D,EAAMhF,UAAUoB,OAAO","file":"main.a47be6e4.js","sourceRoot":"..\\src","sourcesContent":["let SCORE = 0;\n\nexport class Ceil {\n  constructor(gridElement, x, y) {\n    const cell = document.createElement(\"div\");\n    cell.classList.add('field-cell');\n    gridElement.append(cell);\n    this.x = x;\n    this.y = y;\n    this.score = 0;\n    this.gameScore = document.querySelector('.game-score');\n  }\n\n  linkTile(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTile = tile;\n  }\n\n  unlinkTile() {\n    this.linkedTile = null;\n  }\n\n  isEmpty() {\n    return !this.linkedTile;\n  }\n\n  makeAnEmpty() {\n    SCORE = 0;\n    this.gameScore.innerHTML = SCORE;\n    return this.linkedTile = null;\n  }\n\n  linkTileForMerge(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTileForMerge = tile;\n  }\n\n  unlinkTileForMerge() {\n    this.linkedTileForMerge = null;\n  }\n\n  hasTileForMerge() {\n    return !!this.linkedTileForMerge;\n  }\n\n  canAccept(newTile) {\n    return (\n      this.isEmpty() ||\n      (!this.hasTileForMerge() && this.linkedTile.value === newTile.value)\n    );\n  }\n\n  mergeTiles() {\n    if (this.linkedTile) {\n      const result = this.linkedTile.value + this.linkedTileForMerge.value;\n      this.linkedTile.setValue(result);\n\n      this.score += result;\n\n      if (SCORE < this.score) {\n        console.log(this.score)\n        SCORE = this.score;\n        this.gameScore.textContent = SCORE;\n      }\n\n      if (result >= 2048) {\n        const win = document.querySelector('.message-win');\n        win.classList.toggle('hidden');\n      }\n\n      this.linkedTileForMerge.removeFromDOM();\n      this.unlinkTileForMerge();\n    }\n  }\n}\n","const COLORS = {\n  2: '#eee4da',\n  4: '#ede0c8',\n  8: '#f2b179',\n  16: '#f59563',\n  32: '#f67c5f',\n  64: '#f65e3b',\n  128: '#edcf72',\n  256: '#edcc61',\n  512: '#edc850',\n  1024: '#edc53f',\n  2048: '#edc22e',\n};\n\nexport class Tile {\n  constructor(gridElement) {\n    this.tileElement = document.createElement('div');\n    this.tileElement.classList.add('tile');\n    this.setValue(Math.random() > 0.9 ? 2 : 4);\n    gridElement.append(this.tileElement);\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.tileElement.textContent = value;\n    this.tileElement.style.setProperty(\"--bg-color\", `${COLORS[value]}`);\n    this.tileElement.style.setProperty(\"--text-color\", `${value >= 8 ? '#f9f6f2' : '#776e65'}`);\n  }\n\n  setXY(x, y) {\n    this.x = x;\n    this.y = y;\n    this.tileElement.style.setProperty(\"--x\", x);\n    this.tileElement.style.setProperty(\"--y\", y);\n  }\n\n  removeFromDOM() {\n    this.tileElement.remove();\n  }\n\n  waitForTransitionEnd() {\n    return new Promise(resolve => {\n      this.tileElement.addEventListener(\n        \"transitionend\", resolve, { once: true });\n    });\n  }\n\n  waitForAnimationEnd() {\n    return new Promise(resolve => {\n      this.tileElement.addEventListener(\n        \"animationend\", resolve, { once: true });\n    });\n  }\n}\n","'use strict';\n\nimport { Ceil } from \"./Ceil.class\";\nimport { Tile } from \"./Tile.class\";\n\nconst GRID_SIZE = 4;\nconst CELLS_COUNT = GRID_SIZE * GRID_SIZE;\n\nexport class Game {\n  constructor(gridElement) {\n    this.cells = [];\n    for (let i = 0; i < CELLS_COUNT; i++) {\n      this.cells.push(\n        new Ceil(gridElement, i % GRID_SIZE, Math.floor(i / GRID_SIZE))\n      );\n    }\n\n    this.score = 0;\n    this.cellsGroupedByColumn = this.groupCellsByColumn();\n    this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn.map(column => [...column].reverse());\n    this.cellsGroupedByRow = this.groupCellsByRow();\n    this.cellsGroupedByReversedRow = this.cellsGroupedByRow.map(raw => [...raw].reverse());\n  }\n\n  getRandomEmptyCell() {\n    const emptyCells = this.cells.filter(cell => cell.isEmpty());\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    return emptyCells[randomIndex];\n  }\n\n  groupCellsByColumn() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.x] = groupedCells[cell.x] || [];\n      groupedCells[cell.x][cell.y] = cell;\n      return groupedCells;\n    }, []);\n  }\n\n  groupCellsByRow() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.y] = groupedCells[cell.y] || [];\n      groupedCells[cell.y][cell.x] = cell;\n      return groupedCells;\n    }, []);\n  }\n\n  moveUp() {\n    this.slideTiles(this.cellsGroupedByColumn);\n  }\n\n  moveDown() {\n    this.slideTiles(this.cellsGroupedByReversedColumn);\n  }\n\n  moveLeft() {\n    this.slideTiles(this.cellsGroupedByRow);\n  }\n\n  moveRight() {\n    this.slideTiles(this.cellsGroupedByReversedRow);\n  }\n\n  canMoveUp() {\n    return this.canMove(this.cellsGroupedByColumn);\n  }\n\n  canMoveDown() {\n    return this.canMove(this.cellsGroupedByReversedColumn);\n  }\n\n  canMoveLeft() {\n    return this.canMove(this.cellsGroupedByRow);\n  }\n\n  canMoveRight() {\n    return this.canMove(this.cellsGroupedByReversedRow);\n  }\n\n  canMove(groupedCells) {\n    return groupedCells.some(group =>  this.canMoveInGroup(group));\n  }\n\n  canMoveInGroup(group) {\n    return group.some((cell, index) => {\n      if (index === 0) {\n        return false;\n      }\n\n      if (cell.isEmpty()) {\n        return false;\n      }\n\n      const targetCell = group[index - 1];\n      return targetCell.canAccept(cell.linkedTile);\n    });\n  }\n\n  slideTiles(groupedCells) {\n    const promises = [];\n\n    groupedCells.forEach(group => this.slideTilesInGroup(group, promises));\n\n    Promise.all(promises);\n    this.cells.forEach(cell => {\n      cell.hasTileForMerge() && cell.mergeTiles()\n    });\n  }\n\n  slideTilesInGroup(group, promises) {\n    for (let i = 1; i < group.length; i++) {\n      if (group[i].isEmpty()) {\n        continue;\n      }\n\n      const cellWithTile = group[i];\n\n      let targetCell;\n      let j = i - 1;\n      while (j >= 0 && group[j].canAccept(cellWithTile.linkedTile)) {\n        targetCell = group[j];\n        j--;\n      }\n\n      if (!targetCell) {\n        continue;\n      }\n\n      promises.push(cellWithTile.linkedTile.waitForTransitionEnd());\n\n      if (targetCell.isEmpty()) {\n        targetCell.linkTile(cellWithTile.linkedTile);\n      } else {\n        targetCell.linkTileForMerge(cellWithTile.linkedTile);\n      }\n\n      cellWithTile.unlinkTile();\n    }\n  }\n\n  start(gridElement) {\n    this.getRandomEmptyCell().linkTile(new Tile(gridElement));\n    this.getRandomEmptyCell().linkTile(new Tile(gridElement));\n  }\n\n  restart() {\n    const tiles = document.querySelectorAll('.tile');\n    tiles.forEach(tile => {\n      tile.remove();\n    });\n\n    this.cells.forEach(cell => cell.unlinkTile());\n  }\n}\n","'use strict';\n\nimport { Game } from '../modules/Game.class';\nimport { Tile } from '../modules/Tile.class';\n\nconst gridElement = document.getElementById('game-field');\nconst lose = document.querySelector('.message-lose');\nconst start = document.querySelector('.message-start');\n\nconst game = new Game(gridElement);\n\nfunction setupInputOnce() {\n  document.addEventListener('keydown', handleInput, { once: true });\n}\n\nfunction handleInput(event) {\n  switch(event.key) {\n    case \"ArrowUp\":\n      if (!game.canMoveUp()) {\n        setupInputOnce();\n        return;\n      }\n      game.moveUp();\n      break;\n    case \"ArrowDown\":\n      if (!game.canMoveDown()) {\n        setupInputOnce();\n        return;\n      }\n      game.moveDown();\n      break;\n    case \"ArrowLeft\":\n      if (!game.canMoveLeft()) {\n        setupInputOnce();\n        return;\n      }\n      game.moveLeft();\n      break;\n    case \"ArrowRight\":\n      if (!game.canMoveRight()) {\n        setupInputOnce();\n        return;\n      }\n      game.moveRight();\n      break;\n    default:\n      setupInputOnce();\n      return;\n  }\n\n  const newTile = new Tile(gridElement);\n  game.getRandomEmptyCell().linkTile(newTile);\n\n  if (!game.canMoveUp() && !game.canMoveDown() && !game.canMoveLeft() && !game.canMoveRight()) {\n    newTile.waitForAnimationEnd();\n    lose.classList.toggle('hidden');\n    return;\n  }\n\n  setupInputOnce();\n}\n\nconst button = document.querySelector('.button');\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    game.start(gridElement);\n    setupInputOnce();\n    button.classList.replace('start', 'restart');\n    button.textContent = 'Restart';\n    start.classList.toggle('hidden');\n  } else {\n    game.restart();\n    button.classList.replace('restart', 'start');\n    button.textContent = 'Start';\n    start.classList.toggle('hidden');\n  }\n});\n\n"]}